model Coches

-----------Enumerados-----------------
enum TipoRevision{Reparacion, Mantenimiento}
-----------Fin de enumerados----------

class Clock  -- Este es el modelado del tiempo siempre en todos los modelos
  attributes
    NOW : Integer init = 0 -- POSIX representation starting at 0
    resolution: Integer init = 1 
  operations
    tick() 
      begin
        self.NOW := self.NOW + self.resolution
        for o in self.ao do
          o.tick()
        end;
      end
    run (n:Integer)
      begin
        for i in Sequence{1..n} do
          self.tick()
        end;
      end
end

abstract class ActiveObject -- real-time objects (Todos los objetos que variar√°n con el tiempo)
  operations
    tick()
end

class Ciudad
attributes
  nombre: String
end

class Viaje < ActiveObject
attributes
  fechaSalida : Integer
  fechaLlegada : Integer --Si el viaje se enuentra en curso, solo tiene fecha de salida, pero no de llegada
  position : Integer init = 0
  
  operations

  tick()
    begin
      if self.position < self.recorrido.distancia then 
          self.position:=self.position + 1
      end;
      if self.position = self.recorrido.distancia then 
      end;    end
    pre: self.position != self.recorrido.distancia
    post: self.position = self.position@pre + 1
end

class Coche < ActiveObject
attributesrv fc
  matricula: String
  marca: String
  fechaMatriculacion : Integer
  kilometrosRecorridos : Integer derive --Atributo detivado -> Suma de los kilometros recorridos en todos los viajes. Se actualiza solo
    self.viaje->select(v | v.fechaLlegada != null).recorrido->sum(r | r.distancia)
  garantia : Boolean derive : --todo TERMINAR -- Representa el numero de dias restante que tiene garantia
      self.fechaMatriculacion < 400 or --TERMINAR COMO TERMINE EN LA MADRE DE DAVID
      
  necesitaMantenimiento : Boolean derive : --TODO TERMINAR
    self.fechaMatriculacion > 400 or self.revision->select(r | r.fechaFin = revision -> fechaFin -> max()) > 100
    
  viajeEnCurso : Boolean

  operations

  tick()
    begin
      if self.TUPUTAMADREGUARRA COMO LA QUE MAS  (else me chingo a su madre)


end

class Revision < ActiveObject
attributes
  fechaInicio: Integer
  fechaFin: Integer
  tipoRevision : TipoRevision
end

abstract class Taller 
end
class TallerOficial < Taller
attributes
  garantia: Integer
end 

class TallerNoOficial < Taller
end

----------Asociaciones---------------

association Time between 
  Clock [1] role clock
  ActiveObject [*] role ao ordered
end

composition TallerOficialEnCiudad between
  Ciudad [1] role ciudadOficial
  TallerOficial [0..1] role tallerOficial
end

composition TallerNoOficialEnCiudad between
  Ciudad [1] role ciudadNoOficial
  TallerNoOficial [0..*] role tallerNoOficial
end

association Viajar between
  Coche [*] role vehiculo
  Viaje [*] role viaje
end

association RealizarRevision between 
  Coche [*] role coche
  Revision [*] role revision
end

association CocheEnTaller between 
  Coche[*] role cocheAveriado
  Taller[*] role tallerReparador
end
  
association TallerDeRevision between
  Taller[1] role taller
  Revision[*] role revisiones
end

association RecorridoDelViaje between
  Viaje[*] roles viajes
  Recorrido[1] role recorrido
end

----------Fin Asoc TallerRevision betweeniaciones---------------
----------Clase de Asociaciones---------------

associationclass Recorrido between
  Ciudad [*] role ciudad1
  Ciudad [*] role ciudad2
attributes
  distancia: Integer

----------Fin Clase de Asociaciones---------------


-------------------Invariantes--------------------
constraints

context Recorrido
  --*El coche realiza un recorrido siempre entre dos ciudades
  inv CiudadOrigenDistintaCiuddadDestino : 
    Recorrido.allInstances()->forAll(
      c1, c2 | c1 <> c2 implies c1.nombre <> c2.nombre 
    )

context Ciudad
  inv CiudadesAlMenos5Km :
    self.recorrido->select(r | r.distancia < 5).size() = 0

context Revision
  inv RevisionDespuesDeMatriculacion :
    self.fechaInicio < self.coche
-------------------Fin Invariantes--------------------

